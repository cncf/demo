#cloud-config

---
coreos:

  etcd2:
    advertise-client-urls: http://${ fqdn }:2379
    # cert-file: /etc/kubernetes/ssl/k8s-etcd.pem
    debug: true
    initial-advertise-peer-urls: https://${ fqdn }:2380
    # key-file: /etc/kubernetes/ssl/k8s-etcd-key.pem
    listen-client-urls: http://${ fqdn }:2379,http://127.0.0.1:2379
    listen-peer-urls: https://${ fqdn }:2380
    name: ${ fqdn } 
    discovery: ${ etcd_discovery }
    peer-trusted-ca-file: /etc/kubernetes/ssl/ca.pem
    peer-client-cert-auth: true
    peer-cert-file: /etc/kubernetes/ssl/k8s-etcd.pem
    peer-key-file: /etc/kubernetes/ssl/k8s-etcd-key.pem

  units:
    - name: etcd2.service
      command: start

    - name: docker.service
      command: start
      drop-ins:
      - name: overlay.conf
        content: |
          [Service]
          Environment="DOCKER_OPTS=--storage-driver=overlay"

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper
        [Service]
        Environment="KUBELET_IMAGE_URL=${ kubelet_image_url }"
        Environment="KUBELET_IMAGE_TAG=${ kubelet_image_tag }"
        Environment="RKT_RUN_ARGS=\
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf \
          --volume rkt,kind=host,source=/opt/bin/host-rkt \
          --mount volume=rkt,target=/usr/bin/rkt \
          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \
          --mount volume=var-lib-rkt,target=/var/lib/rkt \
          --volume stage,kind=host,source=/tmp \
          --mount volume=stage,target=/tmp \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log"
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet
        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet
        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --allow-privileged=true \
          --api-servers=http://127.0.0.1:8080 \
          --cluster-dns=${ dns_service_ip } \
          --cluster_domain=${ cluster_domain } \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --register-schedulable=false
        Restart=always
        RestartSec=5
        [Install]
        WantedBy=multi-user.target

  update:
    reboot-strategy: etcd-lock

write-files:
  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"

  - path: /etc/logrotate.d/docker-containers
    content: |
      /var/lib/docker/containers/*/*.log {
        rotate 7
        daily
        compress
        size=1M
        missingok
        delaycompress
        copytruncate
      }

  - path: /etc/kubernetes/manifests/kube-apiserver.yml
    encoding: "gzip+base64"
    content: |
      ${ k8s_apiserver_yml }

  - path: /etc/kubernetes/manifests/kube-controller-manager.yml
    encoding: "gzip+base64"
    content: |
      ${ k8s_controller_manager_yml }

  - path: /etc/kubernetes/manifests/kube-proxy.yml
    encoding: "gzip+base64"
    content: |
      ${ k8s_proxy_yml }

  - path: /etc/kubernetes/manifests/kube-scheduler.yml
    encoding: "gzip+base64"
    content: |
      ${ k8s_scheduler_yml }

  - path: /etc/kubernetes/ssl/ca.pem
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ ca }

  - path: /etc/kubernetes/ssl/k8s-etcd.pem
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ k8s_etcd }

  - path: /etc/kubernetes/ssl/k8s-etcd-key.pem
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ k8s_etcd_key }

  - path: /etc/kubernetes/ssl/k8s-apiserver.pem
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ k8s_apiserver }

  - path: /etc/kubernetes/ssl/k8s-apiserver-key.pem
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ k8s_apiserver_key }
